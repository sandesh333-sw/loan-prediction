# -*- coding: utf-8 -*-
"""Loan_status_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C7925kAvmRXglXPW8BxD2qtNQ4A9SChf

Importing the dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

loan_dataset = pd.read_csv('/content/loan_dataset.csv')

type(loan_dataset)

#number of missing values in column
loan_dataset.isnull().sum()

#dropping na
loan_dataset = loan_dataset.dropna()

loan_dataset.isnull().sum()

#label encoding
loan_dataset.replace({"Loan_Status": {'N':0, 'Y':1}}, inplace = True)

loan_dataset.head()

# Dependent column values
loan_dataset['Dependents'].value_counts()

# replacing the value of 3+ to 4
loan_dataset = loan_dataset.replace(to_replace='3+', value=4)

# dependent values
loan_dataset['Dependents'].value_counts()

"""Data Visualization"""

# education & Loan Status
sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

# marital status & Loan Status
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

# convert categorical columns to numerical values
loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},
                      'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

loan_dataset.head()

# separating the data and label
X = loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y = loan_dataset['Loan_Status']

print(X)
print(Y)

"""Test Train Split"""

X_train, X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model

Support Vector Machine Model
"""

classifier = svm.SVC(kernel='linear')

#training the support Vector Macine model
classifier.fit(X_train,Y_train)

# accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuray = accuracy_score(X_train_prediction,Y_train) * 100

print(f"Accuracy on training data : {training_data_accuray}%")

# accuracy score on training data
X_test_prediction = classifier.predict(X_test)
test_data_accuray = accuracy_score(X_test_prediction,Y_test) * 100

print(f"Accuracy on test data : {test_data_accuray}%")

"""Making a predictive System"""

# Function to preprocess new data input
def preprocess_input(input_data):
    # Convert input data to DataFrame
    input_df = pd.DataFrame(input_data, index=[0])

    # Encoding categorical columns similarly to training data
    input_df.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},
                      'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}}, inplace=True)

    # Replacing '3+' in Dependents to 4
    input_df = input_df.replace(to_replace='3+', value=4)

    return input_df

# Function to make predictions
def predict_loan_status(input_data):
    # Preprocess the input data
    processed_data = preprocess_input(input_data)

    # Predict using the trained model
    prediction = classifier.predict(processed_data)

    return 'Approved, Congrats!' if prediction[0] == 1 else 'Sorry, Rejected'

# Example usage
new_data = {
    'Gender': 'Male',
    'Married': 'Yes',
    'Dependents': 1,
    'Education': 'Graduate',
    'Self_Employed': 'No',
    'ApplicantIncome': 5000,
    'CoapplicantIncome': 2000,
    'LoanAmount': 150,
    'Loan_Amount_Term': 360,
    'Credit_History': 1.0,
    'Property_Area': 'Urban'
}

loan_status = predict_loan_status(new_data)
print('The loan status is:', loan_status)

